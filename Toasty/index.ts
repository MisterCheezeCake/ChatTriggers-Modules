/// <reference types="../CTAutocomplete" />
/// <reference lib="es2015" />
// Generated by CT-Pack

const ToastVisibility = Java.type("net.minecraft.client.toast.Toast$Visibility");
const SystemToast = Java.type("net.minecraft.client.toast.SystemToast");
const ToastType = Java.type("net.minecraft.client.toast.SystemToast$Type")

class Toasty {
    /**
     * A function for easily pushing a toast to the screen
     * @param title Toast title, can be a string or a TextComponent. Defaults to yellow color
     * @param description Toast description, can be a string or a TextComponent. Defaults to white color
     * @param duration Duration of the toast in ms
     * @param respectMultiplier Whether to respect the notification display time multiplier. Defaults to true. THE NOTIFICATION TIME MULTIPLIER IS AN ACESSABILITY (A11Y) SETTING, PLEASE USE CAREFULLY
     */
    static pushToast(title: string | TextComponent, description: string | TextComponent, duration: number, respectMultiplier: boolean = true) {
        const ToastManager = Client.getMinecraft().getToastManager();
        let actualDuration = duration;
        if (respectMultiplier) actualDuration *= ToastManager.getNotificationDisplayTimeMultiplier();
        const endTime = Date.now() + actualDuration;
        ToastManager.add(new JavaAdapter(SystemToast, {
            method_1986(ctx, manager, time) {
                this.super$method_1986(ctx, manager, time);
                return Date.now() < endTime ? ToastVisibility.SHOW : ToastVisibility.HIDE;
              },
        },
        ToastType.PERIODIC_NOTIFICATION, 
        typeof title == "string" ? new TextComponent(title) : title, 
        typeof description == "string" ? new TextComponent(description) : description
        ))
    }
    /**
     * Clears all toasts from the screen
     */
    static clearToasts() {
        const ToastManager = Client.getMinecraft().getToastManager();
        ToastManager.clear();
    }
    /**
     * The toast display time multiplier. This is an accessibility setting, please use carefully
     */
    static get timeMultiplier() {
        return Client.getMinecraft().getToastManager().getNotificationDisplayTimeMultiplier();
    }
    title: string | TextComponent;
    description: string | TextComponent;
    /**
     * Constructs a new Toast. Using the constructor allows you to save and reuse the toast along with implementing custom render logic
     * @param title Toast title, can be a string or a TextComponent. Defaults to yellow color
     * @param description Toast description, can be a string or a TextComponent. Defaults to white color.
     */
    constructor (title: string | TextComponent, description: string | TextComponent) {
        this.title = typeof title == "string" ? new TextComponent(title) : title;
        this.description = typeof description == "string" ? new TextComponent(description) : description;
    }
    /**
     * Push the toast to the screen
     * @param duration Duration of the toast in ms
     * @param onDecay This functiion will be called when the toast stops showing
     * @param respectMultiplier Whether to respect the notification display time multiplier. Defaults to true. THE NOTIFICATION TIME MULTIPLIER IS AN ACESSABILITY (A11Y) SETTING, PLEASE USE THIS CAREFULLY
     */
    show(duration: number, onDecay? : () => void, respectMultiplier: boolean = true) {
        Toasty.pushToast(this.title, this.description, duration, respectMultiplier);
        if (onDecay) {
            setTimeout(onDecay, duration);
        } 
    }
    /**
     * Pushes the toast to the screen in addition to calling a custom render function
     * @param duration Duration of the toast in ms
     * @param customRenderer A custom render function. This will be called inside the normal render loop. Look at the source for more information on the arguments.
     * @param onDecay This functiion will be called when the toast stops showing
     * @param respectMultiplier Whether to respect the notification display time multiplier. Defaults to true. THE NOTIFICATION TIME MULTIPLIER IS AN ACESSABILITY (A11Y) SETTING, PLEASE USE THIS CAREFULLY
     */
    customShow(duration: number, customRenderer: (ctx?, manager?, time?) => void, onDecay? : () => void, respectMultiplier: boolean = true) {
       
        if (onDecay) {
            setTimeout(onDecay, duration);
        } 
        const ToastManager = Client.getMinecraft().getToastManager();
        let actualDuration = duration;
        if (respectMultiplier) actualDuration *= ToastManager.getNotificationDisplayTimeMultiplier();
        const endTime = Date.now() + actualDuration;
        ToastManager.add(new JavaAdapter(SystemToast, {
            method_1986(ctx, manager, time) {
                this.super$method_1986(ctx, manager, time);
                customRenderer(ctx, manager, time)
                return Date.now() < endTime ? ToastVisibility.SHOW : ToastVisibility.HIDE;
              },
        },
        ToastType.PERIODIC_NOTIFICATION, 
        this.title,
         this.description,
        ))
    }
}

register("command", (name, description, time) => {
    if (name === "clear") return Toasty.clearToasts();
    Toasty.pushToast(name, description, parseInt(time))
}).setName("toasty")

export default Toasty;



